'use client';

import { SEOAnalysis } from '@/types/seo';
import { CheckCircle, AlertTriangle, Info, TrendingUp, Link, Users, Zap, Share2 } from 'lucide-react';
import RadarChart from './RadarChart';

interface DetailedReportProps {
  analysis: SEOAnalysis;
}

interface CategoryGrade {
  name: string;
  grade: string;
  score: number;
  color: string;
  icon: React.ReactNode;
  description: string;
}

export default function DetailedReport({ analysis }: DetailedReportProps) {
  // Calculate category grades based on analysis
  const getCategoryGrades = (): CategoryGrade[] => {
    const onPageScore = analysis.metaTags.length > 0 ? Math.min(100, 60 + analysis.metaTags.length * 10) : 30;
    const socialScore = analysis.openGraph.title && analysis.twitter.title ? 85 : 45;
    const performanceScore = 75; // Mock score
    const linksScore = analysis.canonical ? 90 : 60;
    const usabilityScore = analysis.h1Tags.length > 0 ? 70 : 40;

    return [
      {
        name: 'On-Page SEO',
        grade: onPageScore >= 80 ? 'A+' : onPageScore >= 70 ? 'B+' : onPageScore >= 60 ? 'C+' : 'D+',
        score: onPageScore,
        color: 'bg-green-500',
        icon: <TrendingUp className="w-4 h-4" />,
        description: 'Meta tags, titles, descriptions'
      },
      {
        name: 'Links',
        grade: linksScore >= 80 ? 'A+' : linksScore >= 70 ? 'B+' : linksScore >= 60 ? 'C+' : 'D+',
        score: linksScore,
        color: 'bg-teal-500',
        icon: <Link className="w-4 h-4" />,
        description: 'Canonical URLs, internal links'
      },
      {
        name: 'Usability',
        grade: usabilityScore >= 80 ? 'A+' : usabilityScore >= 70 ? 'B+' : usabilityScore >= 60 ? 'C+' : 'D+',
        score: usabilityScore,
        color: 'bg-orange-500',
        icon: <Users className="w-4 h-4" />,
        description: 'H1 tags, content structure'
      },
      {
        name: 'Performance',
        grade: performanceScore >= 80 ? 'A-' : performanceScore >= 70 ? 'B+' : performanceScore >= 60 ? 'C+' : 'D+',
        score: performanceScore,
        color: 'bg-green-500',
        icon: <Zap className="w-4 h-4" />,
        description: 'Page speed, optimization'
      },
      {
        name: 'Social',
        grade: socialScore >= 80 ? 'A+' : socialScore >= 70 ? 'B+' : socialScore >= 60 ? 'C+' : 'D+',
        score: socialScore,
        color: 'bg-purple-500',
        icon: <Share2 className="w-4 h-4" />,
        description: 'Open Graph, Twitter Cards'
      }
    ];
  };

  const categoryGrades = getCategoryGrades();
  const overallScore = Math.round(categoryGrades.reduce((sum, cat) => sum + cat.score, 0) / categoryGrades.length);
  const overallGrade = overallScore >= 80 ? 'A+' : overallScore >= 70 ? 'B+' : overallScore >= 60 ? 'C+' : overallScore >= 50 ? 'D+' : 'F';

  const getGradeColor = (grade: string) => {
    if (grade.includes('A')) return 'text-green-600';
    if (grade.includes('B')) return 'text-blue-600';
    if (grade.includes('C')) return 'text-orange-600';
    if (grade.includes('D')) return 'text-red-600';
    return 'text-red-600';
  };

  const getPriorityColor = (priority: string) => {
    switch (priority.toLowerCase()) {
      case 'high': return 'bg-red-100 text-red-800 border-red-200';
      case 'medium': return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'low': return 'bg-blue-100 text-blue-800 border-blue-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  return (
    <div className="bg-white rounded-xl shadow-lg border border-gray-200 overflow-hidden">
      {/* Report Header */}
      <div className="bg-gradient-to-r from-blue-600 to-indigo-700 text-white p-6">
        <div className="flex justify-between items-start">
          <div>
            <h2 className="text-2xl font-bold mb-2">Website Report for {new URL(analysis.url).hostname}</h2>
            <p className="text-blue-100 text-sm">Generated by TagSnippet</p>
          </div>
          <div className="text-right text-sm">
            <p className="font-medium">TagSnippet</p>
            <p className="text-blue-100">hello@tagsnippet.com</p>
            <p className="text-blue-100">https://tagsnippet.com</p>
          </div>
        </div>
      </div>

      {/* Report Summary */}
      <div className="p-6 border-b border-gray-200">
        <p className="text-gray-600 leading-relaxed">
          This report grades your website on factors including on-page SEO optimization, social media readiness, 
          performance, usability, and technical structure. The overall grade is on an A+ to F scale. 
          Improving your grade is recommended for better user experience, search engine ranking, and visibility.
        </p>
      </div>

      {/* Main Report Content */}
      <div className="p-6">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Left Column - Overall Grade */}
          <div className="lg:col-span-1">
            <div className="text-center">
              {/* Overall Grade Circle */}
              <div className="relative inline-block mb-4">
                <svg className="w-32 h-32 transform -rotate-90" viewBox="0 0 120 120">
                  <circle
                    cx="60"
                    cy="60"
                    r="54"
                    fill="none"
                    stroke="#e5e7eb"
                    strokeWidth="8"
                  />
                  <circle
                    cx="60"
                    cy="60"
                    r="54"
                    fill="none"
                    stroke={overallScore >= 80 ? '#10b981' : overallScore >= 70 ? '#3b82f6' : overallScore >= 60 ? '#f59e0b' : '#ef4444'}
                    strokeWidth="8"
                    strokeDasharray={`${(overallScore / 100) * 339.292} 339.292`}
                    strokeLinecap="round"
                  />
                </svg>
                <div className="absolute inset-0 flex items-center justify-center">
                  <div className="text-center">
                    <div className={`text-3xl font-bold ${getGradeColor(overallGrade)}`}>
                      {overallGrade}
                    </div>
                    <div className="text-sm text-gray-500">{overallScore}/100</div>
                  </div>
                </div>
              </div>

              {/* Recommendations Count */}
              <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
                <div className="text-red-800 font-medium mb-1">Your page could be better</div>
                <div className="text-2xl font-bold text-red-600">
                  {analysis.recommendations.length} Recommendations
                </div>
              </div>

              {/* Website Preview */}
              <div className="bg-gray-100 rounded-lg p-4 border border-gray-200">
                <div className="bg-white rounded border border-gray-300 overflow-hidden">
                  <div className="bg-gray-200 px-3 py-1 text-xs text-gray-600 border-b border-gray-300">
                    {new URL(analysis.url).hostname}
                  </div>
                  <div className="p-3">
                    <div className="text-sm font-medium text-gray-900 mb-1">
                      {analysis.title || 'Page Title'}
                    </div>
                    <div className="text-xs text-gray-600 line-clamp-2">
                      {analysis.description || 'Page description will appear here...'}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Right Column - Category Grades and Radar Chart */}
          <div className="lg:col-span-2">
            {/* Category Grades */}
            <div className="grid grid-cols-2 md:grid-cols-3 gap-4 mb-8">
              {categoryGrades.map((category) => (
                <div key={category.name} className="text-center">
                  <div className="relative inline-block mb-2">
                    <svg className="w-16 h-16 transform -rotate-90" viewBox="0 0 60 60">
                      <circle
                        cx="30"
                        cy="30"
                        r="26"
                        fill="none"
                        stroke="#e5e7eb"
                        strokeWidth="4"
                      />
                      <circle
                        cx="30"
                        cy="30"
                        r="26"
                        fill="none"
                        stroke={category.color.replace('bg-', '').includes('green') ? '#10b981' : 
                               category.color.replace('bg-', '').includes('teal') ? '#14b8a6' :
                               category.color.replace('bg-', '').includes('orange') ? '#f59e0b' :
                               category.color.replace('bg-', '').includes('purple') ? '#8b5cf6' : '#3b82f6'}
                        strokeWidth="4"
                        strokeDasharray={`${(category.score / 100) * 163.363} 163.363`}
                        strokeLinecap="round"
                      />
                    </svg>
                    <div className="absolute inset-0 flex items-center justify-center">
                      <div className={`text-sm font-bold ${getGradeColor(category.grade)}`}>
                        {category.grade}
                      </div>
                    </div>
                  </div>
                  <div className="text-xs font-medium text-gray-900 mb-1">{category.name}</div>
                  <div className="text-xs text-gray-500">{category.description}</div>
                </div>
              ))}
            </div>

            {/* Radar Chart */}
            <div className="bg-gray-50 rounded-lg p-4 border border-gray-200">
              <h4 className="font-medium text-gray-900 mb-3">Performance Overview</h4>
              <RadarChart 
                data={categoryGrades.map(cat => ({
                  name: cat.name,
                  score: cat.score,
                  color: cat.color.replace('bg-', '').includes('green') ? '#10b981' : 
                         cat.color.replace('bg-', '').includes('teal') ? '#14b8a6' :
                         cat.color.replace('bg-', '').includes('orange') ? '#f59e0b' :
                         cat.color.replace('bg-', '').includes('purple') ? '#8b5cf6' : '#3b82f6'
                }))}
                size={240}
              />
            </div>
          </div>
        </div>

        {/* Recommendations Section */}
        <div className="mt-8">
          <h3 className="text-xl font-bold text-gray-900 mb-4">Recommendations</h3>
          <div className="space-y-3">
            {analysis.recommendations.map((rec, index) => (
              <div key={index} className="flex items-start space-x-3 p-4 bg-gray-50 rounded-lg border border-gray-200">
                <div className="flex-shrink-0 mt-1">
                  {rec.priority === 'High' ? (
                    <AlertTriangle className="w-5 h-5 text-red-500" />
                  ) : rec.priority === 'Medium' ? (
                    <Info className="w-5 h-5 text-orange-500" />
                  ) : (
                    <CheckCircle className="w-5 h-5 text-blue-500" />
                  )}
                </div>
                <div className="flex-1">
                  <div className="flex items-center justify-between mb-1">
                    <h4 className="font-medium text-gray-900">{rec.action}</h4>
                    <span className={`px-2 py-1 text-xs font-medium rounded-full border ${getPriorityColor(rec.priority)}`}>
                      {rec.priority} Priority
                    </span>
                  </div>
                  <p className="text-sm text-gray-600">{rec.category}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
} 